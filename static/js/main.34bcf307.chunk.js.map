{"version":3,"sources":["SortingVisualizer/animationHelpers.js","sortingAlgoritms/mergeSort.js","sortingAlgoritms/swap.js","sortingAlgoritms/selectionSort.js","sortingAlgoritms/quickSort.js","sortingAlgoritms/heapSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgoritms/insertionSort.js","App.js","index.js"],"names":["DELAY","arrayBars","document","getElementsByClassName","swapBarHeight","barOne","barTwo","speed","setTimeout","tmpHeight","style","height","makeGraphGreen","barIdx","length","changeBarCol","bar","col","backgroundColor","resetDelay","getMergeSortAnimations","array","animations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","swap","leftIndex","rightIndex","swp","quickSortAnimations","left","right","index","pivotIdx","pivot","partition","heapSortAnimations","len","heapify","max","SortingVisualizer","props","state","this","resetArray","gens","randomIntBetween","setState","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","console","log","currPos","insertionSortAnimations","minIdx","selectionSortAnimations","equal","arraysAreEqual","sort","a","b","className","onClick","genArray","mergeSort","insertionSort","selectionSort","quickSort","heapSort","map","value","idx","key","React","Component","min","random","arrayOne","arrayTwo","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.34bcf307.chunk.js","sourcesContent":["export {swapBarHeight, changeBarCol, resetDelay, makeGraphGreen};\n\nvar DELAY = 0;\n\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nfunction swapBarHeight(barOne, barTwo, speed) {\n    setTimeout(() => {\n        const tmpHeight = barOne.style.height;\n        barOne.style.height = barTwo.style.height;\n        barTwo.style.height = tmpHeight;\n      }, DELAY += speed);\n}\n\nfunction makeGraphGreen() {\n    for(let barIdx = arrayBars.length - 1; barIdx >= 0; barIdx--) {\n        changeBarCol(arrayBars[barIdx], \"green\", 1);\n      }\n}\n\nfunction changeBarCol(bar, col, speed) {\n    setTimeout(() => {\n        bar.style.backgroundColor = col;\n      }, DELAY += speed);\n}\n\nfunction resetDelay() {\n    DELAY = 0;\n}","export {\n  getMergeSortAnimations,\n}\n\nfunction getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","export {swap}\n\nfunction swap(array, leftIndex, rightIndex){\n    const swp = array[leftIndex];\n    array[leftIndex] = array[rightIndex];\n    array[rightIndex] = swp;\n}","import {swap} from './swap.js';\nimport {swapBarHeight, changeBarCol} from '../SortingVisualizer/animationHelpers';\nexport {selectionSortAnimations}\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOUR = 'darkblue';\n// This is the color the current bar(i position).\nconst CURRENT_COLOR = 'yellow';\n// This is the colour of the current smallest bar.\nconst SMALLEST_COLOUR = 'red';\n// This is the colour of the final position of the bar.\nconst FINAL_COLOUR = 'green';\n\nconst ANIMATION_SPEED = 5;\n\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nfunction selectionSortAnimations (array) {\n    for(let i = 0; i < array.length; i++) {\n        let minIdx = i\n        changeBarCol(arrayBars[minIdx], CURRENT_COLOR, ANIMATION_SPEED);\n        for(let j = i + 1; j < array.length; j++) {\n            if(array[minIdx] > array[j]) {\n                if(minIdx !== i) {\n                    changeBarCol(arrayBars[minIdx], PRIMARY_COLOUR, ANIMATION_SPEED);\n                }\n                minIdx = j;\n                changeBarCol(arrayBars[minIdx], SMALLEST_COLOUR, ANIMATION_SPEED);\n            }\n        }\n        swap(array, i, minIdx);\n        const barOneStyle = arrayBars[i];\n        const barTwoStyle = arrayBars[minIdx];\n        swapBarHeight(barOneStyle, barTwoStyle, ANIMATION_SPEED);\n        changeBarCol(arrayBars[minIdx], PRIMARY_COLOUR, ANIMATION_SPEED);\n        changeBarCol(arrayBars[i], FINAL_COLOUR, ANIMATION_SPEED);\n      }\n  }","import {swap} from './swap.js';\nimport {swapBarHeight, changeBarCol} from '../SortingVisualizer/animationHelpers';\nexport {quickSortAnimations}\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOUR = 'darkblue';\n// This is the color the current pivot.\nconst CURRENT_COLOR = 'yellow';\n// This is the colour of the current i and j bar.\nconst SECONDARY_COLOUR = 'red';\n// This is the colour of the final position of the bar.\nconst FINAL_COLOUR = 'green';\n\nconst ANIMATION_SPEED = 3;\n\nconst arrayBars = document.getElementsByClassName('array-bar');\n\n\nfunction partition(array, left, right) {\n    const pivotIdx = Math.floor((right + left) / 2)\n    const pivot = array[pivotIdx]; //middle element\n    changeBarCol(arrayBars[pivotIdx], CURRENT_COLOR, ANIMATION_SPEED);\n    let i = left;\n    let j = right;\n    while (i <= j) {\n        changeBarCol(arrayBars[j], SECONDARY_COLOUR, ANIMATION_SPEED);\n        changeBarCol(arrayBars[i], SECONDARY_COLOUR, ANIMATION_SPEED);\n        while (array[i] < pivot) {\n            changeBarCol(arrayBars[i], PRIMARY_COLOUR, ANIMATION_SPEED);\n            i++;\n            changeBarCol(arrayBars[i], PRIMARY_COLOUR, ANIMATION_SPEED);\n        }\n        while (array[j] > pivot) {\n            changeBarCol(arrayBars[j], PRIMARY_COLOUR, ANIMATION_SPEED);\n            j--;\n            changeBarCol(arrayBars[j], SECONDARY_COLOUR, ANIMATION_SPEED);\n        }\n        if (i <= j) {\n            swap(array, i, j); //swap two elements\n            swapBarHeight(arrayBars[i], arrayBars[j], ANIMATION_SPEED);\n            changeBarCol(arrayBars[j], PRIMARY_COLOUR, ANIMATION_SPEED);\n            changeBarCol(arrayBars[i], PRIMARY_COLOUR, ANIMATION_SPEED);\n            i++;\n            j--;\n        }\n        else {\n            changeBarCol(arrayBars[j], PRIMARY_COLOUR, ANIMATION_SPEED);\n            changeBarCol(arrayBars[i], PRIMARY_COLOUR, ANIMATION_SPEED);\n        }\n    }\n    if (i >= pivotIdx) {\n        changeBarCol(arrayBars[i], FINAL_COLOUR, ANIMATION_SPEED);\n    }\n    else if(j <= pivotIdx) {\n        changeBarCol(arrayBars[j], FINAL_COLOUR, ANIMATION_SPEED);\n    }\n    else {\n        changeBarCol(arrayBars[pivotIdx], FINAL_COLOUR, ANIMATION_SPEED);\n    }\n    return i;\n}\nfunction quickSortAnimations(array, left, right) {\n    var index;\n    if (array.length > 1) {\n        index = partition(array, left, right);\n        if (left < index - 1) {\n            quickSortAnimations(array, left, index - 1);\n        }\n        if (index < right) {\n            quickSortAnimations(array, index, right);\n        }\n    }\n    return array;\n}","import {swapBarHeight, changeBarCol} from '../SortingVisualizer/animationHelpers';\nimport {swap} from './swap';\nexport {heapSortAnimations}\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOUR = 'darkblue';\n// This is the color the current bar(i position).\nconst MAX_COLOR = 'yellow';\n// This is the colour of the current smallest bar.\nconst FINAL_COLOUR = 'green';\n\nconst ANIMATION_SPEED = 3;\n\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nfunction heapSortAnimations (array) {\n    const len = array.length;\n\n    for(let i = Math.floor(len / 2) - 1; i >= 0; i--) {\n        heapify(array, len, i);\n    }\n\n    for(let j = len - 1; j >= 0; j--) {\n        changeBarCol(arrayBars[0], FINAL_COLOUR, ANIMATION_SPEED);\n        swap(array, j, 0);\n        swapBarHeight(arrayBars[j], arrayBars[0], ANIMATION_SPEED);\n        changeBarCol(arrayBars[j], FINAL_COLOUR, ANIMATION_SPEED);\n        heapify(array, j, 0);\n    }\n    changeBarCol(arrayBars[0], FINAL_COLOUR, ANIMATION_SPEED);\n    return array;\n}\n\nfunction heapify(array, len, index) {\n    let max = index;\n    const left = (2 * max) + 1;\n    const right = left + 1;\n\n    changeBarCol(arrayBars[max], MAX_COLOR, ANIMATION_SPEED);\n    \n    if(left < len && array[max] < array[left]) {\n        changeBarCol(arrayBars[max], PRIMARY_COLOUR, ANIMATION_SPEED);\n        max = left;\n        changeBarCol(arrayBars[max], MAX_COLOR, ANIMATION_SPEED);\n    }\n\n    if(right < len && array[max] < array[right]) {\n        changeBarCol(arrayBars[max], PRIMARY_COLOUR, ANIMATION_SPEED);\n        max = right;\n        changeBarCol(arrayBars[max], MAX_COLOR, ANIMATION_SPEED);\n    }\n\n    if(max !== index) {\n        changeBarCol(arrayBars[max], PRIMARY_COLOUR, ANIMATION_SPEED);\n        swap(array, index, max);\n        swapBarHeight(arrayBars[index], arrayBars[max], ANIMATION_SPEED);\n        changeBarCol(arrayBars[max], MAX_COLOR, ANIMATION_SPEED);\n        heapify(array, len, max);\n    }\n\n    changeBarCol(arrayBars[max], PRIMARY_COLOUR, ANIMATION_SPEED);\n}\n","import React from 'react';\nimport {resetDelay, makeGraphGreen} from './animationHelpers';\nimport {getMergeSortAnimations,} from '../sortingAlgoritms/mergeSort';\nimport {selectionSortAnimations,} from '../sortingAlgoritms/selectionSort';\nimport {insertionSortAnimations,} from '../sortingAlgoritms/insertionSort';\nimport {quickSortAnimations} from '../sortingAlgoritms/quickSort';\nimport {heapSortAnimations} from '../sortingAlgoritms/heapSort';\nimport './SortingVisualizer.css';\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOUR = 'darkblue';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\n// Global variables used to organise the setTimeouts.\nconst ANIMATION_SPEED_MS = 3;\n\nconst arrayBars = document.getElementsByClassName('array-bar');\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    genArray() {\n        for(let gens = randomIntBetween(2, 5); gens < 6; gens++) {\n            this.resetArray();\n        }\n    }\n\n    resetArray() {\n        const array = [];\n        for(let i = 0; i < 100; i++) {\n            array.push(randomIntBetween(1,100));\n        }\n        this.setState({array});\n        for(let j = 0; j < arrayBars.length;j++) {\n            arrayBars[j].style.backgroundColor = \"darkblue\";\n        }\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        const arrayBars = document.getElementsByClassName('array-bar');\n        for (let i = 0; i < animations.length; i++) {\n          const isColorChange = i % 3 !== 2;\n          if (isColorChange) {\n            const [barOneIdx, barTwoIdx] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            const barTwoStyle = arrayBars[barTwoIdx].style;\n            const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOUR;\n            setTimeout(() => {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n            }, i * ANIMATION_SPEED_MS);\n          } else {\n            setTimeout(() => {\n              const [barOneIdx, newHeight] = animations[i];\n              const barOneStyle = arrayBars[barOneIdx].style;\n              barOneStyle.height = `${newHeight * 0.99}%`;\n            }, i * ANIMATION_SPEED_MS);\n          }\n        }\n        console.log(this.state.array);\n        console.log(arrayBars);\n      }\n    \n    insertionSort() {\n        insertionSortAnimations(this.state.array);\n        makeGraphGreen();\n        resetDelay();\n    }\n\n    selectionSort() {\n        selectionSortAnimations(this.state.array, arrayBars);\n        resetDelay();\n    }\n    quickSort() {\n        quickSortAnimations(this.state.array, 0, this.state.array.length - 1);\n        makeGraphGreen();\n        resetDelay();\n    }\n    heapSort() {\n        heapSortAnimations(this.state.array);\n        resetDelay();\n    }\n\n    // NOTE: This method will only work if your sorting algorithms actually return\n    // the sorted arrays; if they return the animations (as they currently do), then\n    // this method will be broken.\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n        const array = [];\n        const length = randomIntBetween(1, 1000);\n        for (let i = 0; i < length; i++) {\n            array.push(randomIntBetween(-1000, 1000));\n        }\n        const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n        const ourSortedArray = heapSortAnimations(array.slice(), 0, array.length - 1);\n        const equal = arraysAreEqual(javaScriptSortedArray, ourSortedArray);\n        console.log(equal);\n        // if(equal === true) {\n        //     console.log(equal);\n        //     }\n        // else {\n        //     console.log(javaScriptSortedArray, ourSortedArray);\n        // }\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n        \n        return (\n            <div className=\"Vis-container\">\n                <div className=\"button-container\">\n                    <button className=\"button\" onClick={() => this.genArray()}>Generate New Array</button>\n                    <button className=\"button\" onClick={() => this.mergeSort()}>Merge Sort</button>\n                    <button className=\"button\" onClick={() => this.insertionSort()}>Insertion Sort</button>\n                    <button className=\"button\" onClick={() => this.selectionSort()}>Selection Sort</button>\n                    <button className=\"button\" onClick={() => this.quickSort()}>Quick Sort</button>\n                    <button className=\"button\" onClick={() => this.heapSort()}>Heap Sort</button>\n                </div>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div \n                        className=\"array-bar\" \n                        key={idx}\n                        style={{height: `${value * 0.99}%`}} ></div>\n                    ))}\n                </div>\n                {/* <div className=\"error-warning\">\n                    <h3>There is currently a bug when generating a new array so press the button twice and it will work.</h3>\n                </div> */}\n            </div>\n        );\n    }\n}\n\nfunction randomIntBetween(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n      if (arrayOne[i] !== arrayTwo[i]) {\n          return false;\n      }\n    }\n    return true;\n}\n\nfunction checkBars() {\n    for(let barIdx = 0; barIdx < arrayBars.length; barIdx++) {\n        console.log(arrayBars[barIdx].style.height);\n    }\n}","import {swapBarHeight, changeBarCol} from '../SortingVisualizer/animationHelpers';\nexport {insertionSortAnimations}\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOUR = 'darkblue';\n// This is the color the current bar(i position).\nconst CURRENT_COLOR = 'yellow';\n// This is the colour of the current smallest bar.\nconst SMALLEST_COLOUR = 'red';\n\nconst ANIMATION_SPEED = 1;\n\nfunction insertionSortAnimations (array) {\n  const arrayBars = document.getElementsByClassName('array-bar');\n  for(let i = 1; i < array.length; i++) {\n      let currPos = array[i];\n      changeBarCol(arrayBars[i], CURRENT_COLOR, ANIMATION_SPEED);\n      let j = i - 1;\n      while(j >= 0 && currPos < array[j]) {\n          changeBarCol(arrayBars[j], SMALLEST_COLOUR, ANIMATION_SPEED);\n          array[j + 1] = array[j];\n          swapBarHeight(arrayBars[j + 1], arrayBars[j], ANIMATION_SPEED);\n          changeBarCol(arrayBars[j], PRIMARY_COLOUR, ANIMATION_SPEED);\n          j -=1\n      }\n      array[j + 1] = currPos;\n    }\n  }","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n// import TextBox from './TextBox/TextBox';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n      {/* <TextBox></TextBox> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}